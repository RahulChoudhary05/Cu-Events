const bcrypt = require("bcrypt");
const User = require("../models/User");
const OTP = require("../models/OTP");
const Profile = require("../models/Profile")
const jwt = require("jsonwebtoken");
const otpGenerator = require("otp-generator");

exports.signUpUser = async (req, res) => {
    try {
        const { firstName, lastName, email, password, confirmPassword, accountType, contactNumber, otp } = req.body;

        if (!firstName || !lastName || !email || !password || !confirmPassword || !otp) {                //validate krlo means all inbox are filled or not;
            return res.status(403).json({
                success: false,
                message: "All fields are required",
            })
        }
        if (password !== confirmPassword) {                                            //both password must be matched 
            return res.status(400).json({
                success: false,
                message: 'Password and ConfirmPassword Value does not match, please try again',
            });
        }
        const existingUser = await User.findOne({ email });                   //check user already exist or not
        if (existingUser) {
            return res.status(400).json({
                success: false,
                message: 'User is already registered',
            });
        }

        const response = await OTP.find({ email }).sort({ createdAt: -1 }).limit(1);               //find most recent OTP stored for the user or most recent OTP generated for user;

        if (response.length === 0) {                                //validate OTP , Lenght 0 so OTP not found
            return res.status(400).json({
                success: false,
                message: 'OTP NOT Found',
            })
        }
        else if (otp !== response[0].otp) {                           // if otp entered by user != actual otp then PRINT Invalid OTP;
            return res.status(400).json({                          // here otp is entered by user and response[0].otp is generated by controller;
                success: false,
                message: "Invalid OTP",
            });
        }

        const hashedPassword = await bcrypt.hash(password, 10);          //Hashed the password

        //created entry in Profile in DB
        const profileDetails = await Profile.create({
            gender: null,
            about: null,
            contactNumer: null,
        });
        //created entry in User in DB
        const user = await User.create({
            firstName,
            lastName,
            email,
            contactNumber,
            password: hashedPassword,
            accountType: accountType,
            additionalDetails: profileDetails._id,
            image: `https://api.dicebear.com/5.x/initials/svg?seed=${firstName} ${lastName}`,
        })

        return res.status(200).json({
            success: true,
            user,
            message: 'User is registered Successfully',
        });
    }
    catch (error) {
        console.log(error);
        return res.status(500).json({
            success: false,
            message: "User cannot be registrered. Please try again",
        })
    }
}

exports.signUpOrganizer = async (req, res) => {
    try {
        const { firstName, lastName, email, password, confirmPassword, staffId, accountType, contactNumber, otp } = req.body;

        if (!firstName || !lastName || !email || !staffId || !password || !confirmPassword || !otp) {
            return res.status(403).json({
                success: false,
                message: "All fields are required",
            })
        }
        if (password !== confirmPassword) {
            return res.status(400).json({
                success: false,
                message: 'Password and ConfirmPassword Value does not match, please try again',
            });
        }
        const existingUser = await User.findOne({ email });
        if (existingUser) {
            return res.status(400).json({
                success: false,
                message: 'User is already registered',
            });
        }

        const response = await OTP.find({ email }).sort({ createdAt: -1 }).limit(1);

        if (response.length === 0) {
            return res.status(400).json({
                success: false,
                message: 'OTP NOT Found',
            })
        }
        else if (otp !== response[0].otp) {
            return res.status(400).json({
                success: false,
                message: "Invalid OTP",
            });
        }

        const hashedPassword = await bcrypt.hash(password, 10);

        let approved = "";
        approved === "Organizer" ? (approved = false) : (approved = true);

        const profileDetails = await Profile.create({
            gender: null,
            about: null,
            contactNumer: null,
        });

        const user = await User.create({
            firstName,
            lastName,
            email,
            staffId,
            contactNumber,
            password: hashedPassword,
            accountType: accountType,
            approved: approved,
            additionalDetails: profileDetails._id,
            image: `https://api.dicebear.com/5.x/initials/svg?seed=${firstName} ${lastName}`,
        })

        return res.status(200).json({                      //return res
            success: true,
            user,
            message: 'Organizer is registered Successfully',
        });
    }
    catch (error) {
        console.log(error);
        return res.status(500).json({
            success: false,
            message: "Organizer cannot be registrered. Please try again",
        })
    }
}

exports.sendOTP = async (req, res) => {
    try {
        const { email } = req.body;

        const checkUserPresent = await User.findOne({ email });

        if (checkUserPresent) {
            return res.status(401).json({
                success: false,
                message: "Already Registered",
            });
        }

        var otp = otpGenerator.generate(6, {
            upperCaseAlphabets: false,
            lowerCaseAlphabets: false,
            specialChars: false,
        });

        const result = await otp.findOne({ otp: otp });
        console.log("Result is Generate OTP Func");
        console.log("OTP", otp);
        console.log("Result", result);
        while (result) {
            otp = otpGenerator.generate(6, {
                upperCaseAlphabets: false,
            });
        }

        const otpPayload = { email, otp };
        const otpBody = await OTP.create(otpPayload);
        console.log("OTP Body", otpBody);
        res.status(200).json({
            success: true,
            message: "OTP Sent Successfully",
            otp,
        });
    } catch (error) {
        console.log(error.message);
        return res.status(500).json({
            success: false,
            error: error.message,
        });
    }
};